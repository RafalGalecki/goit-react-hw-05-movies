{"version":3,"file":"static/js/40.bef95712.chunk.js","mappings":"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","sources":["components/ReviewsElement/ReviewsElement.styled.js","components/ReviewsElement/ReviewsElement.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewLi = styled.li`\nfont-size: 14px;\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\nmargin-bottom: 20px;\n`;","import React from 'react';\nimport Markdown from 'marked-react';\nimport { ReviewLi } from './ReviewsElement.styled';\nimport parse from 'html-react-parser';\nconst ReviewsElement = ({ author, content }) => {\n  const parsed = parse(content);\n  return (\n    <ReviewLi>\n      <h4>Author: {author}</h4>\n      {content.includes('<em>') ? (\n        <p>{parsed}</p>\n      ) : (\n        <Markdown>{content}</Markdown>\n      )}\n    </ReviewLi>\n  );\n};\nexport default ReviewsElement;\n","import { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/api';\nimport ReviewsElement from '../ReviewsElement/ReviewsElement';\nimport { Container } from '../SharedLayout/SharedLayout.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n  const divRef = useRef(null);\n\n  useEffect(() => {\n    divRef.current.scrollIntoView({ behavior: 'smooth' });\n  });\n\n  useEffect(() => {\n    const getReviews = async () => {\n      const response = await getMovieReviews(id);\n      if (response !== null) {\n        setReviews(response);\n      } else {\n        setReviews([]);\n      }\n    };\n    getReviews();\n  }, [id]);\n\n  return (\n    <Container>\n      <div ref={divRef} />\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(element => {\n            return (\n              <ReviewsElement\n                key={element.id}\n                author={element.author}\n                content={element.content}\n              />\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </Container>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nexport const API_KEY = process.env.REACT_APP_AUTH_TOKEN;\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      console.log('FULL Response:', response);\n      console.log('API KEY:', process.env.REACT_APP_AUTH_TOKEN);\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  console.log('Trending', response);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({\n      movieId: movie.id,\n      movieTitle: movie.title,\n      movieBackdrop: 'https://image.tmdb.org/t/p/w200' + movie.backdrop_path,\n    });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  } = response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  };\n  console.log('details', response);\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  console.log('CAST', response);\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieCrew = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let crew = [];\n  console.log('Crew', response);\n  response.data.crew.forEach(element => {\n    const { id, profile_path, name, department, job } = element;\n    return crew.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      department,\n      job,\n    });\n  });\n  return crew;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nconst getMovieSimilar = async id => {\n  const response = await fetchTMDB(`/movie/${id}/similar`);\n  if (response === null) {\n    return null;\n  }\n  let similar = [];\n  console.log('SIMILAR', response);\n  response.data.results.forEach(element => {\n    const { id, poster_path, title, release_date } = element;\n    return similar.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + poster_path,\n      title,\n      releaseDate: `${new Date(release_date).getFullYear()}`,\n    });\n  });\n  return similar;\n};\n\nconst getTheBestOfGenre = async (genre) => {\n  const response = await fetchTMDB(\n    `/discover/movie?with_genres=${genre}&sort_by=vote_average.desc&vote_count.gte=10`\n  );\n  if (response === null) {\n    return null;\n  }\n  console.log('BEST res', response)\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMoviesWithCast = async (castId) => {\n  const response = await fetchTMDB(\n    `/discover/movie?with_people=${castId}&sort_by=vote_average.desc`\n  );\n  if (response === null) {\n    return null;\n  }\n  console.log('Cast - movies res', response)\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieCrew,\n  getMovieReviews,\n  getMovieSimilar,\n  getTheBestOfGenre,\n  getMoviesWithCast,\n};\n"],"names":["ReviewLi","styled","author","content","parsed","parse","includes","useState","reviews","setReviews","id","useParams","divRef","useRef","useEffect","current","scrollIntoView","behavior","getReviews","getMovieReviews","response","ref","length","map","element","API_KEY","process","REACT_APP_AUTH_TOKEN","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","console","log","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","title","movieBackdrop","backdrop_path","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","vote_count","overview","genres","homepage","tagline","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","voteCount","getMovieCast","cast","profile_path","name","character","srcImg","getMovieCrew","crew","department","job","getMovieSimilar","similar","getTheBestOfGenre","genre"],"sourceRoot":""}