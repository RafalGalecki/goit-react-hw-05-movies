{"version":3,"file":"static/js/959.2887b5d1.chunk.js","mappings":"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","sources":["../node_modules/marked/lib/marked.esm.js","../node_modules/marked-react/dist/marked-react.js"],"sourcesContent":["/**\n * marked v4.3.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\nclass Hooks {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n}\n\nfunction onError(silent, async, callback) {\n  return (e) => {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (silent) {\n      const msg = '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      if (callback) {\n        callback(null, msg);\n        return;\n      }\n      return msg;\n    }\n\n    if (async) {\n      return Promise.reject(e);\n    }\n    if (callback) {\n      callback(e);\n      return;\n    }\n    throw e;\n  };\n}\n\nfunction parseMarkdown(lexer, parser) {\n  return (src, opt, callback) => {\n    if (typeof opt === 'function') {\n      callback = opt;\n      opt = null;\n    }\n\n    const origOpt = { ...opt };\n    opt = { ...marked.defaults, ...origOpt };\n    const throwError = onError(opt.silent, opt.async, callback);\n\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      return throwError(new Error('marked(): input parameter is undefined or null'));\n    }\n    if (typeof src !== 'string') {\n      return throwError(new Error('marked(): input parameter is of type '\n        + Object.prototype.toString.call(src) + ', string expected'));\n    }\n\n    checkSanitizeDeprecation(opt);\n\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n\n    if (callback) {\n      const highlight = opt.highlight;\n      let tokens;\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        tokens = lexer(src, opt);\n      } catch (e) {\n        return throwError(e);\n      }\n\n      const done = function(err) {\n        let out;\n\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              marked.walkTokens(tokens, opt.walkTokens);\n            }\n            out = parser(tokens, opt);\n            if (opt.hooks) {\n              out = opt.hooks.postprocess(out);\n            }\n          } catch (e) {\n            err = e;\n          }\n        }\n\n        opt.highlight = highlight;\n\n        return err\n          ? throwError(err)\n          : callback(null, out);\n      };\n\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n\n      delete opt.highlight;\n\n      if (!tokens.length) return done();\n\n      let pending = 0;\n      marked.walkTokens(tokens, function(token) {\n        if (token.type === 'code') {\n          pending++;\n          setTimeout(() => {\n            highlight(token.text, token.lang, function(err, code) {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n\n      if (pending === 0) {\n        done();\n      }\n\n      return;\n    }\n\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n        .then(src => lexer(src, opt))\n        .then(tokens => opt.walkTokens ? Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n        .then(tokens => parser(tokens, opt))\n        .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n        .catch(throwError);\n    }\n\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      const tokens = lexer(src, opt);\n      if (opt.walkTokens) {\n        marked.walkTokens(tokens, opt.walkTokens);\n      }\n      let html = parser(tokens, opt);\n      if (opt.hooks) {\n        html = opt.hooks.postprocess(html);\n      }\n      return html;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  return parseMarkdown(Lexer.lex, Parser.parse)(src, opt, callback);\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  marked.defaults = { ...marked.defaults, ...opt };\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n\n  args.forEach((pack) => {\n    // copy options to new object\n    const opts = { ...pack };\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async || false;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse Hooks extensions --== //\n    if (pack.hooks) {\n      const hooks = marked.defaults.hooks || new Hooks();\n      for (const prop in pack.hooks) {\n        const prevHook = hooks[prop];\n        if (Hooks.passThroughHooks.has(prop)) {\n          hooks[prop] = (arg) => {\n            if (marked.defaults.async) {\n              return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\n                return prevHook.call(hooks, ret);\n              });\n            }\n\n            const ret = pack.hooks[prop].call(hooks, arg);\n            return prevHook.call(hooks, ret);\n          };\n        } else {\n          hooks[prop] = (...args) => {\n            let ret = pack.hooks[prop].apply(hooks, args);\n            if (ret === false) {\n              ret = prevHook.apply(hooks, args);\n            }\n            return ret;\n          };\n        }\n      }\n      opts.hooks = hooks;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = parseMarkdown(Lexer.lexInline, Parser.parseInline);\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Hooks, Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n","import { createElement, Fragment } from 'react';\nimport { Lexer } from 'marked';\n\nconst htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\",\n};\n/** Used to match HTML entities and HTML characters. */\nconst reEscapedHtml = /&(?:amp|lt|gt|quot|#(?:0+)?39);/g;\nconst reHasEscapedHtml = RegExp(reEscapedHtml.source);\nconst unescape = (str = '') => {\n    return reHasEscapedHtml.test(str) ? str.replace(reEscapedHtml, (entity) => htmlUnescapes[entity] || \"'\") : str;\n};\nconst joinBase = (path, base) => {\n    if (!base) {\n        return path;\n    }\n    try {\n        return new URL(path, base).href;\n    }\n    catch (_a) {\n        return path;\n    }\n};\n\nclass ReactParser {\n    constructor(options) {\n        this.renderer = options.renderer;\n    }\n    parse(tokens) {\n        return tokens.map((token) => {\n            switch (token.type) {\n                case 'space': {\n                    return null;\n                }\n                case 'heading': {\n                    const level = token.depth;\n                    return this.renderer.heading(this.parseInline(token.tokens), level);\n                }\n                case 'paragraph': {\n                    return this.renderer.paragraph(this.parseInline(token.tokens));\n                }\n                case 'text': {\n                    const textTokens = token.tokens;\n                    return textTokens ? this.parseInline(textTokens) : token.text;\n                }\n                case 'blockquote': {\n                    const quote = this.parse(token.tokens);\n                    return this.renderer.blockquote(quote);\n                }\n                case 'list': {\n                    const children = token.items.map((item) => {\n                        var _a;\n                        const listItemChildren = [];\n                        if (item.task) {\n                            listItemChildren.push(this.renderer.checkbox((_a = item.checked) !== null && _a !== void 0 ? _a : false));\n                        }\n                        listItemChildren.push(this.parse(item.tokens));\n                        return this.renderer.listItem(listItemChildren);\n                    });\n                    return this.renderer.list(children, token.ordered);\n                }\n                case 'code': {\n                    return this.renderer.code(token.text, token.lang);\n                }\n                case 'html': {\n                    return this.renderer.html(token.text);\n                }\n                case 'table': {\n                    const headerCells = token.header.map((cell, index) => {\n                        return this.renderer.tableCell(this.parseInline(cell.tokens), { header: true, align: token.align[index] });\n                    });\n                    const headerRow = this.renderer.tableRow(headerCells);\n                    const header = this.renderer.tableHeader(headerRow);\n                    const bodyChilren = token.rows.map((row) => {\n                        const rowChildren = row.map((cell, index) => {\n                            return this.renderer.tableCell(this.parseInline(cell.tokens), {\n                                header: false,\n                                align: token.align[index],\n                            });\n                        });\n                        return this.renderer.tableRow(rowChildren);\n                    });\n                    const body = this.renderer.tableBody(bodyChilren);\n                    return this.renderer.table([header, body]);\n                }\n                case 'hr': {\n                    return this.renderer.hr();\n                }\n                default: {\n                    console.warn(`Token with \"${token.type}\" type was not found`); // eslint-disable-line no-console\n                    return null;\n                }\n            }\n        });\n    }\n    parseInline(tokens) {\n        return tokens.map((token) => {\n            switch (token.type) {\n                case 'text': {\n                    return this.renderer.text(unescape(token.text));\n                }\n                case 'strong': {\n                    return this.renderer.strong(this.parseInline(token.tokens));\n                }\n                case 'em': {\n                    return this.renderer.em(this.parseInline(token.tokens));\n                }\n                case 'del': {\n                    return this.renderer.del(this.parseInline(token.tokens));\n                }\n                case 'codespan': {\n                    return this.renderer.codespan(unescape(token.text));\n                }\n                case 'link': {\n                    return this.renderer.link(token.href, this.parseInline(token.tokens));\n                }\n                case 'image': {\n                    return this.renderer.image(token.href, token.text, token.title);\n                }\n                case 'html': {\n                    return this.renderer.html(token.text);\n                }\n                case 'br': {\n                    return this.renderer.br();\n                }\n                case 'escape': {\n                    return this.renderer.text(token.text);\n                }\n                default: {\n                    console.warn(`Token with \"${token.type}\" type was not found`); // eslint-disable-line no-console\n                    return null;\n                }\n            }\n        });\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\n\nvar _ReactRenderer_instances, _ReactRenderer_elId, _ReactRenderer_options, _ReactRenderer_h, _ReactRenderer_incrementElId;\nclass ReactRenderer {\n    constructor(options = {}) {\n        _ReactRenderer_instances.add(this);\n        _ReactRenderer_elId.set(this, 0);\n        _ReactRenderer_options.set(this, void 0);\n        const { renderer } = options;\n        __classPrivateFieldSet(this, _ReactRenderer_options, options, \"f\");\n        if (renderer && typeof renderer === 'object') {\n            Object.entries(renderer).forEach(([key, value]) => {\n                const rendererName = key;\n                const rendererFunction = value;\n                if (!this[rendererName] || rendererName === 'elementId' || typeof rendererFunction !== 'function') {\n                    return;\n                }\n                this[rendererName];\n                this[rendererName] = (...args) => {\n                    __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_incrementElId).call(this);\n                    return rendererFunction.apply(this, args);\n                };\n            });\n        }\n    }\n    get elementId() {\n        return __classPrivateFieldGet(this, _ReactRenderer_elId, \"f\");\n    }\n    heading(children, level) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, `h${level}`, children);\n    }\n    paragraph(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'p', children);\n    }\n    link(href, text) {\n        const url = joinBase(href, __classPrivateFieldGet(this, _ReactRenderer_options, \"f\").baseURL);\n        const target = __classPrivateFieldGet(this, _ReactRenderer_options, \"f\").openLinksInNewTab ? '_blank' : null;\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'a', text, { href: url, target });\n    }\n    image(src, alt, title) {\n        const url = joinBase(src, __classPrivateFieldGet(this, _ReactRenderer_options, \"f\").baseURL);\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'img', null, { src: url, alt, title });\n    }\n    codespan(code, lang = null) {\n        const className = lang ? `${__classPrivateFieldGet(this, _ReactRenderer_options, \"f\").langPrefix}${lang}` : null;\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'code', code, { className });\n    }\n    code(code, lang) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'pre', this.codespan(code, lang));\n    }\n    blockquote(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'blockquote', children);\n    }\n    list(children, ordered) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, ordered ? 'ol' : 'ul', children);\n    }\n    listItem(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'li', children);\n    }\n    checkbox(checked) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'input', null, { type: 'checkbox', disabled: true, checked });\n    }\n    table(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'table', children);\n    }\n    tableHeader(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'thead', children);\n    }\n    tableBody(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'tbody', children);\n    }\n    tableRow(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'tr', children);\n    }\n    tableCell(children, flags) {\n        const tag = flags.header ? 'th' : 'td';\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, tag, children, { align: flags.align });\n    }\n    strong(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'strong', children);\n    }\n    em(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'em', children);\n    }\n    del(children) {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'del', children);\n    }\n    text(text) {\n        return text;\n    }\n    html(html) {\n        return html;\n    }\n    hr() {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'hr');\n    }\n    br() {\n        return __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_h).call(this, 'br');\n    }\n}\n_ReactRenderer_elId = new WeakMap(), _ReactRenderer_options = new WeakMap(), _ReactRenderer_instances = new WeakSet(), _ReactRenderer_h = function _ReactRenderer_h(el, children = null, props = {}) {\n    const elProps = {\n        key: `marked-react-${this.elementId}`,\n    };\n    __classPrivateFieldGet(this, _ReactRenderer_instances, \"m\", _ReactRenderer_incrementElId).call(this);\n    return createElement(el, Object.assign(Object.assign({}, props), elProps), children);\n}, _ReactRenderer_incrementElId = function _ReactRenderer_incrementElId() {\n    __classPrivateFieldSet(this, _ReactRenderer_elId, __classPrivateFieldGet(this, _ReactRenderer_elId, \"f\") + 1, \"f\");\n};\n\nconst validateComponentProps = (props) => {\n    if (props.value && typeof props.value !== 'string') {\n        throw new TypeError(`[marked-react]: Expected value to be of type string but got ${typeof props.value}`);\n    }\n    if (props.children && typeof props.children !== 'string') {\n        throw new TypeError(`[marked-react]: Expected children to be of type string but got ${typeof props.children}`);\n    }\n};\nconst Markdown = (props) => {\n    var _a, _b;\n    validateComponentProps(props);\n    // lexer options\n    const lexerOptions = {\n        breaks: props.breaks,\n        gfm: props.gfm,\n    };\n    // convert input markdown into tokens\n    const markdownString = (_b = (_a = props.value) !== null && _a !== void 0 ? _a : props.children) !== null && _b !== void 0 ? _b : '';\n    const tokens = props.isInline\n        ? Lexer.lexInline(markdownString, lexerOptions)\n        : Lexer.lex(markdownString, lexerOptions);\n    // parser options\n    const parserOptions = {\n        renderer: new ReactRenderer({\n            renderer: props.renderer,\n            baseURL: props.baseURL,\n            openLinksInNewTab: props.openLinksInNewTab,\n            langPrefix: props.langPrefix,\n        }),\n    };\n    const parser = new ReactParser(parserOptions);\n    const children = props.isInline ? parser.parseInline(tokens) : parser.parse(tokens);\n    return createElement(Fragment, null, children);\n};\nMarkdown.defaultProps = {\n    isInline: false,\n    breaks: false,\n    gfm: true,\n    baseURL: undefined,\n    openLinksInNewTab: true,\n    langPrefix: 'language-',\n    renderer: undefined,\n};\n\nexport { Markdown as default };\n"],"names":["getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","hooks","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","baseUrls","justDomain","rtrim","relativeBase","protocol","domain","resolveUrl","encodeURI","noopTest","exec","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","length","pop","splice","push","c","invert","l","suffLen","currChar","slice","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","Tokenizer","options","this","src","rules","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","join","indentCodeCompensation","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","row","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","level","findClosingBracket","linkLen","links","reflink","nolink","maskedSrc","prevChar","emStrong","lDelim","nextChar","punctuation","rDelim","rLength","lLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","out","charCodeAt","random","toString","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","Lexer","Object","create","inlineQueue","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","space","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","codespan","startInline","inlineText","lex","Renderer","infostring","quote","slugger","id","slug","body","content","flags","TextRenderer","Slugger","seen","value","originalSlug","isDryRun","occurenceAccumulator","hasOwnProperty","serialize","getNextSafeSlug","dryrun","Parser","textRenderer","l2","l3","cell","itemBody","checkbox","ret","renderers","parser","parseInline","tablecell","tablerow","parse","unshift","listitem","image","Hooks","markdown","parseMarkdown","callback","origOpt","throwError","message","msg","Promise","resolve","reject","onError","marked","prototype","warn","checkSanitizeDeprecation","preprocess","done","err","postprocess","pending","setTimeout","then","all","catch","Set","setOptions","newDefaults","use","childTokens","args","pack","opts","ext","prevRenderer","apply","prop","prevTokenizer","prevHook","passThroughHooks","has","arg","values","concat","lexInline","_ReactRenderer_instances","_ReactRenderer_elId","_ReactRenderer_options","_ReactRenderer_h","_ReactRenderer_incrementElId","htmlUnescapes","reEscapedHtml","reHasEscapedHtml","entity","joinBase","path","URL","_a","ReactParser","textTokens","children","listItemChildren","listItem","headerCells","tableCell","headerRow","tableHeader","bodyChilren","rowChildren","tableBody","__classPrivateFieldGet","receiver","kind","f","TypeError","get","__classPrivateFieldSet","set","ReactRenderer","add","entries","rendererName","rendererFunction","baseURL","target","openLinksInNewTab","alt","className","disabled","WeakMap","WeakSet","el","props","elProps","key","elementId","createElement","assign","Markdown","_b","validateComponentProps","lexerOptions","markdownString","isInline","parserOptions","Fragment","defaultProps","undefined"],"sourceRoot":""}