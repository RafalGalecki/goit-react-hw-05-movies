{"version":3,"file":"static/js/595.6a5aefa6.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/CastElement/CastElement.styled.js","components/SimilarElement/SimilarElement.jsx","components/Similar/Similar.jsx","services/api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastGrid = styled.div`\ndisplay: flex;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n  row-gap: 18px;\n  column-gap: 12px;\n  margin-top: 12px;\n  margin-left: auto;\n  margin-right: auto;\n\n`;\n\n","import styled from 'styled-components';\n\nexport const Portrait = styled.div`\n  max-width: 160px;\n  background-color: grey;\n  box-shadow: 0px 6px 3px -2px rgba(0, 0, 0, 0.36);\n  transition-property: transform;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 6px;\n   & > img {border-radius: 6px;}\n\n  &:hover {\n    transform: scale(1.03);\n    transform: box-shadow;\n    box-shadow: 0px 5px 3px 1px rgba(0, 0, 0, 0.46);\n`;\n\nexport const Role = styled.div`\n  font-size: 12px;\n  height: 40px;\n  padding: 10px 0;\n  margin-bottom: 8px;\n`;\n\nexport const CastGridItem = styled.li`\n  flex-basis: calc((100% - 15px) * 1 / 2);\n\n  display: flex;\n  flex-direction: column;\n  @media screen and (min-width: 340px) {\n    flex-basis: calc((100% - 15px * 2) / 3);\n  }\n  @media screen and (min-width: 480px) {\n    flex-basis: calc((100% - 15px * 3) / 4);\n  }\n  @media screen and (min-width: 620px) {\n    flex-basis: calc((100% - 15px * 4) / 5);\n  }\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 15px * 5) / 6);\n  }\n  @media screen and (min-width: 968px) {\n    flex-basis: calc((100% - 15px * 6) / 7);\n  }\n  @media screen and (min-width: 1140px) {\n    flex-basis: calc((100% - 15px * 7) / 8);\n  }\n`;\nexport const Placeholder = styled.div`\n  display: flex;\n  height: 100%;\n  color: #aaaaaa;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from 'react';\nimport {\n  Portrait,\n  Role,\n  CastGridItem,\n  Placeholder,\n} from '../CastElement/CastElement.styled';\n\nconst SimilarElement = ({ id, srcImg, title, releaseDate }) => {\n  return (\n    <CastGridItem>\n      {!srcImg.includes(null) ? (\n        <Portrait>\n          <img src={srcImg} alt={`${title} - this movie's poster`} />\n        </Portrait>\n      ) : (\n        <Placeholder>\n          <p>No poster yet.</p>\n        </Placeholder>\n      )}\n      <Role>\n        <p>\n          <b>{title}</b>\n        </p>\n        <p>{releaseDate}</p>\n      </Role>\n    </CastGridItem>\n  );\n};\nexport default SimilarElement;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { getMovieSimilar } from 'services/api';\nimport SimilarElement from 'components/SimilarElement/SimilarElement';\nimport { Container } from '../SharedLayout/SharedLayout.styled';\nimport { CastGrid } from '../Cast/Cast.styled';\n\nconst Similar = () => {\n  const [similar, setSimilar] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getSimilar = async () => {\n      const response = await getMovieSimilar(id);\n      if (response !== null) {\n        setSimilar([...response]);\n      } else {\n        setSimilar([]);\n      }\n    };\n    getSimilar();\n  }, [id]);\n\n  return (\n    <Container>\n      {similar.length > 0 ? (\n        <CastGrid>\n          {similar.map(element => {\n            return (\n              <SimilarElement\n                key={element.id + nanoid()}\n                srcImg={element.srcImg}\n                title={element.title}\n                releaseDate={element.releaseDate}\n              />\n            );\n          })}\n        </CastGrid>\n      ) : (\n        <div>Similar movies not found</div>\n      )}\n    </Container>\n  );\n};\n\nexport default Similar;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      console.log('FULL Response:', response);\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  } = response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline\n  };\n  console.log('details', response);\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  console.log('CAST', response);\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieCrew = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let crew = [];\n  console.log('Crew', response);\n  response.data.crew.forEach(element => {\n    const { id, profile_path, name, department, job } = element;\n    return crew.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      department,\n      job,\n    });\n  });\n  return crew;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nconst getMovieSimilar = async id => {\n  const response = await fetchTMDB(`/movie/${id}/similar`);\n  if (response === null) {\n    return null;\n  }\n  let similar = [];\n  console.log('SIMILAR', response);\n  response.data.results.forEach(element => {\n    const { id, poster_path, title, release_date } = element;\n    return similar.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + poster_path,\n      title,\n      releaseDate: `${new Date(release_date).getFullYear()}`,\n    });\n  });\n  return similar;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieCrew,\n  getMovieReviews,\n  getMovieSimilar,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["CastGrid","styled","Portrait","Role","CastGridItem","Placeholder","id","srcImg","title","releaseDate","includes","src","alt","useState","similar","setSimilar","useParams","useEffect","getSimilar","getMovieSimilar","response","length","map","element","nanoid","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","console","log","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","vote_count","overview","genres","homepage","tagline","movieDetails","posterPath","Date","getFullYear","voteAverage","voteCount","getMovieCast","cast","profile_path","name","character","getMovieCrew","crew","department","job","getMovieReviews","reviews","author","content","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}