{"version":3,"file":"static/js/135.4153fbb8.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie__card\":\"MovieDetails_movie__card__NGWuX\",\"movie__poster\":\"MovieDetails_movie__poster__HNrMD\",\"movie__desc\":\"MovieDetails_movie__desc__h95ka\",\"movie__genres\":\"MovieDetails_movie__genres__qJHB-\",\"movie__score\":\"MovieDetails_movie__score__DE4wI\"};","import { useEffect, useState, Suspense } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport { getMovieDetails } from 'services/api';\nimport { Link } from '../../components/SharedLayout.styled';\nimport Loader from '../../components/Loader/Loader';\nimport css from './MovieDetails.module.css';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const getDetails = async () => {\n      const response = await getMovieDetails(id);\n      if (response !== null) {\n        setMovieDetails(response);\n        console.log('Details', response);\n      } else {\n        setMovieDetails('');\n      }\n    };\n    getDetails();\n  }, [id]);\n\n  return (\n    <main>\n      <Link\n        className={[css.movie__link]}\n        to={location.state ? location.state.from : '/'}\n      >\n        &lt; Go back\n      </Link>\n      {movieDetails && (\n        <>\n          <div className={[css.movie__card]}>\n            <div className={[css.movie__poster]}>\n              {!movieDetails.posterPath.includes(null) ? (\n                <img\n                  src={movieDetails.posterPath}\n                  alt={`${movieDetails.title}'s poster`}\n                />\n              ) : (\n                <p>No poster yet.</p>\n              )}\n            </div>\n            <div className={[css.movie__desc]}>\n              <h3>\n                {movieDetails.title} ({movieDetails.releaseDate})\n              </h3>\n              <h4 className={[css.movie__score]}>\n                User score: {Math.round(movieDetails.voteAverage * 10)}% /\n                Votes: {movieDetails.voteCount}\n              </h4>\n              <div>\n                <h4>Overview</h4>\n                <p>{movieDetails.overview}</p>\n              </div>\n              <div>\n                <h4>Genres</h4>\n                <ul className={[css.movie__genres]}>\n                  {movieDetails.genres.map(element => (\n                    <li key={element.id}>{element.name}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div className={[css.movie__additions]}>\n            <h5>Additional information</h5>\n            <ul>\n              <li>\n                <Link to=\"cast\">Cast</Link>\n              </li>\n              <li>\n                <Link to=\"reviews\">Reviews</Link>\n              </li>\n            </ul>\n          </div>\n        </>\n      )}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  console.log('FULL RESPONSE', response);\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, vote_count, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n};\n"],"names":["useState","movieDetails","setMovieDetails","id","useParams","location","useLocation","useEffect","getDetails","getMovieDetails","response","console","log","className","css","to","state","from","posterPath","includes","src","alt","title","releaseDate","Math","round","voteAverage","voteCount","overview","genres","map","element","name","Suspense","fallback","Loader","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","getQueryMovies","query","poster_path","release_date","vote_average","vote_count","Date","getFullYear","getMovieCast","cast","profile_path","character","srcImg","getMovieReviews","reviews","author","content"],"sourceRoot":""}