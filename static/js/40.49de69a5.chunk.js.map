{"version":3,"file":"static/js/40.49de69a5.chunk.js","mappings":"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","sources":["components/ReviewsElement/ReviewsElement.styled.js","components/ReviewsElement/ReviewsElement.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewLi = styled.li`\nfont-size: 14px;\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\nmargin-bottom: 20px;\n`;","import React from 'react';\nimport Markdown from 'marked-react';\nimport { ReviewLi } from './ReviewsElement.styled';\n\nconst ReviewsElement = ({ author, content }) => {\n  return (\n    <ReviewLi>\n      <h4>Author: {author}</h4>\n      <Markdown>{content}</Markdown>\n    </ReviewLi>\n  );\n};\n\nexport default ReviewsElement;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/api';\nimport ReviewsElement from '../ReviewsElement/ReviewsElement';\nimport { Container } from '../SharedLayout/SharedLayout.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      const response = await getMovieReviews(id);\n      if (response !== null) {\n        setReviews(response);\n      } else {\n        setReviews([]);\n      }\n    };\n    getReviews();\n  }, [id]);\n\n  return (\n    <Container>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(element => {\n            return (\n              <ReviewsElement\n                key={element.id}\n                author={element.author}\n                content={element.content}\n              />\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </Container>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, vote_count, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n};\n"],"names":["ReviewLi","styled","author","content","useState","reviews","setReviews","id","useParams","useEffect","getReviews","getMovieReviews","response","length","map","element","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","console","log","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","title","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","vote_count","overview","genres","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","voteCount","getMovieCast","cast","profile_path","name","character","srcImg"],"sourceRoot":""}