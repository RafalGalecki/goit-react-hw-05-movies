{"version":3,"file":"static/js/544.285422b6.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","components/MoviesListElement.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ title, children }) => {\n    return (\n        <div>\n            <h2>{title}</h2>\n            <ul>{children}</ul>\n        </div>\n    )\n};\n\nMoviesList.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node,\n}\n\nexport default MoviesList;","import React from 'react';\nimport { Link } from './SharedLayout.styled';\n\nconst MoviesListElement = ({ movieId, movieTitle, to, from }) => {\n  return (\n    <li key={movieId}>\n      <Link to={`${to}`} state={{from: from}}>{movieTitle}</Link>\n    </li>\n  );\n};\n\nexport default MoviesListElement;\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getTrendingMovies } from 'services/api';\nimport MoviesList from 'components/MoviesList';\nimport MoviesListElement from 'components/MoviesListElement';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const locaction = useLocation();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await getTrendingMovies();\n      console.log('response', response);\n      if (response !== null) {\n        setMovies(response);\n      } else {\n        setMovies([]);\n      }\n    };\n    fetchMovies();\n  }, []);\n  return (\n    <main>\n      <MoviesList title=\"Trending today\">\n        {movies &&\n          movies.map(({ movieId, movieTitle }) => (\n            <MoviesListElement\n              key={movieId}\n              movieTitle={movieTitle}\n              to={'movies/' + movieId}\n              from={locaction}\n              movieId={movieId}\n            />\n          ))}\n      </MoviesList>\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  console.log('FULL RESPONSE', response);\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, vote_count, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n};\n"],"names":["title","children","movieId","movieTitle","to","from","state","useState","movies","setMovies","locaction","useLocation","useEffect","fetchMovies","getTrendingMovies","response","console","log","map","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","handleMoviesData","data","results","forEach","movie","push","id","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","vote_count","overview","genres","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","voteCount","getMovieCast","cast","element","profile_path","name","character","srcImg","getMovieReviews","reviews","author","content"],"sourceRoot":""}