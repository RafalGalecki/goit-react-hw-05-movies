{"version":3,"file":"static/js/599.21eb31ad.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","components/MoviesListElement/MoviesListElement.styled.js","webpack://goit-react-hw-05-movies/./src/components/MoviesListElement/MoviesListElement.module.css?f067","components/MoviesListElement/MoviesListElement.jsx","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesGrid\":\"MoviesList_moviesGrid__FjeEa\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport css from './MoviesList.module.css'\n\nconst MoviesList = ({ title, children }) => {\n    return (\n        <div>\n            <h2 style={{marginBottom: '10px'}}>{title}</h2>\n            <ul className={css.moviesGrid} >{children}</ul>\n        </div>\n    )\n};\n\nMoviesList.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node,\n}\n\nexport default MoviesList;","import styled from 'styled-components';\n\nexport const MovieLi = styled.li`\n  display: flex;\n  flex-direction: row;\n  font-weight: 500;\n  padding: 2px;\n  transition-property: transform;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(0.996);\n  }\n`;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"MoviesListElement_backdrop__wJv1T\",\"thumb\":\"MoviesListElement_thumb__Os8-r\",\"label\":\"MoviesListElement_label__0SgiT\"};","import React from 'react';\nimport { Link } from '../SharedLayout/SharedLayout.styled';\nimport { MovieLi } from './MoviesListElement.styled';\nimport css from './MoviesListElement.module.css';\nimport placeholderBackdrop from '../../images/placeholderBackdrop.jpg';\n\nconst MoviesListElement = ({\n  movieId,\n  movieTitle,\n  movieBackdrop,\n  to,\n  from,\n}) => {\n  const placeholder = !movieBackdrop.includes(null)\n    ? movieBackdrop\n    : placeholderBackdrop;\n  return (\n    <MovieLi key={movieId}>\n      <Link className={css.thumb} to={`${to}`} state={{ from: from }}>\n        <img className={css.backdrop} src={placeholder} alt={movieTitle} />\n        <p className={css.label}>{movieTitle}</p>\n      </Link>\n    </MovieLi>\n  );\n};\n\nexport default MoviesListElement;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: row;\n  justify-content: start;\n  align-items: center;\n  margin: 0;\n  margin-bottom: 20px;\n  height: 30px;\n  width: 70vw;\n  gap: 4px;\n`;\n\nexport const Input = styled.input`\n  padding: 8px;\n  height: 100%;\n  width: 320px;\n  border-color: white;\n  border-radius: 4px;\n  outline: none;\n  color: #261c09;\n  box-shadow: 4px 4px 6px rgba(58, 43, 12, 0.22);\n`;\n\nexport const Button = styled.button`\n  text-align: center;\n  height: 100%;\n  width: 100px;\n\n  padding: 0 20px;\n  background-color: orange;\n  color: white;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.87;\n  letter-spacing: 0.06em;\n  text-align: center;\n  cursor: pointer;\n  border: none;\n  border-radius: 4px;\n  box-shadow: inset 3px 6px 16px -8px rgba(249, 243, 232, 0.9),\n    inset -2px -2px 8px 1px rgba(77, 57, 19, 0.75),\n    4px 4px 6px rgba(58, 43, 12, 0.22);\n  transition-property: box-shadow;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    box-shadow: inset 2px 2px 3px rgba(77, 57, 19, 0.75),\n      inset -2px -2px 4px rgba(249, 243, 232, 0.6);\n  }\n`;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button } from './Searchbar.styled';\n\nconst Searchbar = ({ searcher }) => {\n  const [filter, setFilter] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searcher(filter);\n    setFilter('');\n  };\n  const handleChange = event => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <Form onSubmit={event => handleSubmit(event)}>\n      <Input\n        type=\"search\"\n        name=\"query\"\n        value={filter}\n        placeholder=\"Enter a movie title\"\n        onChange={event => handleChange(event)}\n      />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nSearchbar.propTypes = {\n  searcher: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport MoviesListElement from 'components/MoviesListElement/MoviesListElement';\nimport { getQueryMovies } from 'services/api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filter, setFilter] = useState(searchParams.get('query'));\n  const location = useLocation();\n  const [isMovie, setIsMovie] = useState(null);\n\n  const searcher = filter => {\n    if (filter) {\n      setFilter(filter);\n    }\n  };\n\n  useEffect(() => {\n    if (filter) {\n      setSearchParams({ query: filter });\n      const getMovies = async () => {\n        const response = await getQueryMovies(filter);\n        if (response !== null) {\n          setMovies(response);\n          setIsMovie(true);\n        }\n        if (response.length === 0) {\n          setIsMovie(false);\n        }\n      };\n      getMovies();\n    }\n  }, [filter, setSearchParams]);\n\n  return (\n    <main>\n      <Searchbar filter={filter} searcher={filter => searcher(filter)} />\n\n      {isMovie === null ? (\n        <div>\n          <h4>Search The Movie DataBase for movies</h4>\n        </div>\n      ) : isMovie ? (\n        <MoviesList>\n          {movies &&\n            movies.map(({ movieId, movieTitle, movieBackdrop }) => (\n              <MoviesListElement\n                key={movieId}\n                movieTitle={movieTitle}\n                movieBackdrop={movieBackdrop}\n                to={movieId.toString()}\n                from={location}\n                movieId={movieId}\n              />\n            ))}\n        </MoviesList>\n      ) : (\n        <div>\n          <p>No results</p>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      console.log('FULL Response:', response);\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  console.log('Trending', response);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({\n      movieId: movie.id,\n      movieTitle: movie.title,\n      movieBackdrop: 'https://image.tmdb.org/t/p/w200' + movie.backdrop_path,\n    });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  } = response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  };\n  console.log('details', response);\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  console.log('CAST', response);\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieCrew = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let crew = [];\n  console.log('Crew', response);\n  response.data.crew.forEach(element => {\n    const { id, profile_path, name, department, job } = element;\n    return crew.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      department,\n      job,\n    });\n  });\n  return crew;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nconst getMovieSimilar = async id => {\n  const response = await fetchTMDB(`/movie/${id}/similar`);\n  if (response === null) {\n    return null;\n  }\n  let similar = [];\n  console.log('SIMILAR', response);\n  response.data.results.forEach(element => {\n    const { id, poster_path, title, release_date } = element;\n    return similar.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + poster_path,\n      title,\n      releaseDate: `${new Date(release_date).getFullYear()}`,\n    });\n  });\n  return similar;\n};\n\nconst getBestGenreforYear = async (genre, year) => {\n  const response = await fetchTMDB(\n    `/discover/movie?with_genres=${genre}&primary_release_year=${year}`\n  );\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieCrew,\n  getMovieReviews,\n  getMovieSimilar,\n  getBestGenreforYear,\n};\n"],"names":["title","children","style","marginBottom","className","css","MovieLi","styled","movieId","movieTitle","movieBackdrop","to","from","placeholder","includes","placeholderBackdrop","state","src","alt","Form","Input","Button","searcher","useState","filter","setFilter","onSubmit","event","preventDefault","handleSubmit","type","name","value","onChange","target","handleChange","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","location","useLocation","isMovie","setIsMovie","useEffect","query","getMovies","getQueryMovies","response","length","MoviesList","map","MoviesListElement","toString","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","console","log","catch","error","getTrendingMovies","handleMoviesData","data","results","forEach","movie","push","id","backdrop_path","getMovieDetails","poster_path","release_date","vote_average","vote_count","overview","genres","homepage","tagline","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","voteCount","getMovieCast","cast","element","profile_path","character","srcImg","getMovieCrew","crew","department","job","getMovieReviews","reviews","author","content","getMovieSimilar","similar"],"sourceRoot":""}