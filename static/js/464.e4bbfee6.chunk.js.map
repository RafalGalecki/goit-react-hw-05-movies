{"version":3,"file":"static/js/464.e4bbfee6.chunk.js","mappings":"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","sources":["components/CastElement/CastElement.jsx","components/Cast/Cast.jsx","components/Cast/Cast.styled.js","components/CastElement/CastElement.styled.js","services/api.js","webpack://goit-react-hw-05-movies/./src/components/CastElement/CastElement.module.css?10dc","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\nimport {\n  Portrait,\n  Role,\n  CastGridItem,\n} from './CastElement.styled';\nimport css from './CastElement.module.css'\nimport placeholderPortrait from '../../images/placeholderPortrait.jpg';\n\nconst CastElement = ({ id, srcImg, name, character }) => {\n  //const placeholder = !srcImg.includes(null) ? srcImg : placeholderPortrait;\n  return (\n    <CastGridItem key={id}>\n      {!srcImg.includes(null) ? (\n        <Portrait>\n          <img src={srcImg} alt={`${name}'s portrait`} />\n        </Portrait>\n      ) : (\n        <div className={css.thumb}>\n          <img className={css.image} src={placeholderPortrait} alt=\"placeholder\" />\n          <p className={css.label}>No image yet</p>\n        </div>\n      )}\n      <Role>\n        <p>{name}</p>\n        <p>as:</p>\n        <p>{character}</p>\n      </Role>\n    </CastGridItem>\n  );\n};\nexport default CastElement;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { getMovieCast } from 'services/api';\nimport CastElement from 'components/CastElement/CastElement';\nimport { Container } from '../SharedLayout/SharedLayout.styled';\nimport { CastGrid } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getCast = async () => {\n      const response = await getMovieCast(id);\n      if (response !== null) {\n        setCast([...response]);\n      } else {\n        setCast([]);\n      }\n    };\n    getCast();\n  }, [id]);\n\n  return (\n    <Container>\n      {cast.length > 0 ? (\n        <CastGrid>\n          {cast.map(element => {\n            return (\n              <CastElement\n                key={element.id + nanoid()}\n                srcImg={element.srcImg}\n                name={element.name}\n                character={element.character}\n              />\n            );\n          })}\n        </CastGrid>\n      ) : (\n        <div>Cast not found</div>\n      )}\n    </Container>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const CastGrid = styled.div`\ndisplay: flex;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n  row-gap: 18px;\n  column-gap: 12px;\n  margin-top: 12px;\n  margin-left: auto;\n  margin-right: auto;\n\n`;\n\n","import styled from 'styled-components';\n\nexport const Portrait = styled.div`\n  max-width: 160px;\n  background-color: grey;\n  box-shadow: 0px 6px 3px -2px rgba(0, 0, 0, 0.36);\n  transition-property: transform;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 6px;\n   & > img {border-radius: 6px;}\n\n  &:hover {\n    transform: scale(1.03);\n    transform: box-shadow;\n    box-shadow: 0px 5px 3px 1px rgba(0, 0, 0, 0.46);\n`;\n\nexport const Role = styled.div`\n  font-size: 12px;\n  height: 40px;\n  padding: 10px 0;\n  margin-bottom: 8px;\n`;\n\nexport const CastGridItem = styled.li`\n  flex-basis: calc((100% - 15px) * 1 / 2);\n\n  display: flex;\n  flex-direction: column;\n  @media screen and (min-width: 340px) {\n    flex-basis: calc((100% - 15px * 2) / 3);\n  }\n  @media screen and (min-width: 480px) {\n    flex-basis: calc((100% - 15px * 3) / 4);\n  }\n  @media screen and (min-width: 620px) {\n    flex-basis: calc((100% - 15px * 4) / 5);\n  }\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 15px * 5) / 6);\n  }\n  @media screen and (min-width: 968px) {\n    flex-basis: calc((100% - 15px * 6) / 7);\n  }\n  @media screen and (min-width: 1140px) {\n    flex-basis: calc((100% - 15px * 7) / 8);\n  }\n`;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      console.log('FULL Response:', response);\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  console.log('Trending', response);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({\n      movieId: movie.id,\n      movieTitle: movie.title,\n      movieBackdrop: 'https://image.tmdb.org/t/p/w200' + movie.backdrop_path,\n    });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  } = response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  };\n  console.log('details', response);\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  console.log('CAST', response);\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieCrew = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let crew = [];\n  console.log('Crew', response);\n  response.data.crew.forEach(element => {\n    const { id, profile_path, name, department, job } = element;\n    return crew.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      department,\n      job,\n    });\n  });\n  return crew;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nconst getMovieSimilar = async id => {\n  const response = await fetchTMDB(`/movie/${id}/similar`);\n  if (response === null) {\n    return null;\n  }\n  let similar = [];\n  console.log('SIMILAR', response);\n  response.data.results.forEach(element => {\n    const { id, poster_path, title, release_date } = element;\n    return similar.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + poster_path,\n      title,\n      releaseDate: `${new Date(release_date).getFullYear()}`,\n    });\n  });\n  return similar;\n};\n\nconst getBestGenreforYear = async (genre, year) => {\n  const response = await fetchTMDB(\n    `/discover/movie?with_genres=${genre}&primary_release_year=${year}`\n  );\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieCrew,\n  getMovieReviews,\n  getMovieSimilar,\n  getBestGenreforYear,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"thumb\":\"CastElement_thumb__H0Ylg\",\"label\":\"CastElement_label__3ceLg\",\"image\":\"CastElement_image__O720H\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["id","srcImg","name","character","includes","className","css","src","placeholderPortrait","alt","useState","cast","setCast","useParams","useEffect","getCast","getMovieCast","response","length","map","element","nanoid","CastGrid","styled","Portrait","Role","CastGridItem","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","console","log","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","title","movieBackdrop","backdrop_path","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","vote_count","overview","genres","homepage","tagline","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","voteCount","profile_path","getMovieCrew","crew","department","job","getMovieReviews","reviews","author","content","getMovieSimilar","similar","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}