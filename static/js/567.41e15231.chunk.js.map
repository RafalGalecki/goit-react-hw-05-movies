{"version":3,"file":"static/js/567.41e15231.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","components/MoviesListItem.jsx","components/Searchbar.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ title, children }) => {\n    return (\n        <div>\n            <h2>{title}</h2>\n            <ul>{children}</ul>\n        </div>\n    )\n};\n\nMoviesList.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node,\n}\n\nexport default MoviesList;","import React from 'react';\nimport { Link } from './SharedLayout.styled';\n\nconst MoviesListItem = ({ movieId, movieTitle, to, from }) => {\n  return (\n    <li key={movieId}>\n      <Link to={`${to}`} state={{from: from}}>{movieTitle}</Link>\n    </li>\n  );\n};\n\nexport default MoviesListItem;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ searcher }) => {\n  const [filter, setFilter] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searcher(filter);\n    setFilter('');\n  };\n  const handleChange = event => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <form onSubmit={event => handleSubmit(event)}>\n      <input\n        type=\"search\"\n        name=\"query\"\n        value={filter}\n        placeholder=\"Enter a movie title\"\n        onChange={event => handleChange(event)}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchbar.propTypes = {\n  searcher: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Searchbar from 'components/Searchbar';\nimport MoviesList from 'components/MoviesList';\nimport MoviesListItem from 'components/MoviesListItem';\nimport { getQueryMovies } from 'services/api';\n\nconst Movies = ({ query }) => {\n  const [movies, setMovies] = useState();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filter, setFilter] = useState(searchParams.get('query'));\n  const [isMovie, setIsMovie] = useState(false);\n\n  const searcher = filter => {\n    if (filter) {\n      setFilter(filter);\n    }\n  };\n\n  useEffect(() => {\n    setSearchParams({ query: filter });\n    const getMovies = async () => {\n      const response = await getQueryMovies(filter);\n      console.log('RES', response);\n      if (response !== null) {\n        setMovies(response);\n        setIsMovie(true);\n      }\n      if (response.length === 0) {\n        setIsMovie(false);\n        console.log('ZERO');\n      }\n    };\n    getMovies();\n  }, [filter, setSearchParams]);\n\n  return (\n    <main>\n      <Searchbar filter={filter} searcher={filter => searcher(filter)} />\n      {isMovie === null ?? (\n        <p>No</p>\n      )}\n      { isMovie ? (\n        <MoviesList title=\"Movies of the title you searched\">\n          {movies &&\n            movies.map(({ movieId, movieTitle }) => (\n              <MoviesListItem key={movieId} movieTitle={movieTitle} />\n            ))}\n        </MoviesList>\n      ) : (\n        <div style={{ marginTop: '100px' }}>\n          <p>Please type the movie's title to search </p>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(star => {\n    const { id, profile_path, name, character } = star;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    })\n  })\n  return cast;\n}\n\nexport { getTrendingMovies, getQueryMovies, getMovieDetails, getMovieCast };\n\n"],"names":["title","children","movieId","movieTitle","to","from","state","searcher","useState","filter","setFilter","onSubmit","event","preventDefault","handleSubmit","type","name","value","placeholder","onChange","target","handleChange","query","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","isMovie","setIsMovie","useEffect","getMovies","getQueryMovies","response","console","log","length","MoviesList","map","MoviesListItem","style","marginTop","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","getTrendingMovies","handleMoviesData","data","results","forEach","movie","push","id","getMovieDetails","poster_path","release_date","vote_average","overview","genres","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","getMovieCast","cast","star","profile_path","character","srcImg"],"sourceRoot":""}