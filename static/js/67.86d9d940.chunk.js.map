{"version":3,"file":"static/js/67.86d9d940.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","components/MoviesListItem.jsx","components/Searchbar.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ title, children }) => {\n    return (\n        <div>\n            <h2>{title}</h2>\n            <ul>{children}</ul>\n        </div>\n    )\n};\n\nMoviesList.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node,\n}\n\nexport default MoviesList;","import React from 'react';\n\nconst MoviesListItem = ({ movieId, movieTitle }) => {\n  return <li key={movieId}>{movieTitle}</li>;\n};\n\nexport default MoviesListItem;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ searcher }) => {\n  const [filter, setFilter] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searcher(filter);\n    setFilter('');\n  };\n  const handleChange = event => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <form onSubmit={event => handleSubmit(event)}>\n      <input\n        type=\"search\"\n        name=\"query\"\n        value={filter}\n        onChange={event => handleChange(event)}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchbar.propTypes = {\n  searcher: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Searchbar from 'components/Searchbar';\nimport MoviesList from 'components/MoviesList';\nimport MoviesListItem from 'components/MoviesListItem';\nimport { getQueryMovies } from 'services/api';\n\nconst Movies = ({ query }) => {\n  const [movies, setMovies] = useState();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filter, setFilter] = useState(searchParams.get('query'));\n  const [isMovie, setIsMovie] = useState(false);\n\n  const searcher = filter => {\n    if (filter) {\n      setFilter(filter);\n    }\n  };\n\n  useEffect(() => {\n    setSearchParams({ query: filter });\n    const getMovies = async () => {\n      const response = await getQueryMovies(filter);\n      if (response !== null) {\n        setMovies(response);\n        setIsMovie(true);\n      } else {\n        setIsMovie(false);\n      }\n    };\n    getMovies();\n  }, [filter, setSearchParams]);\n\n  return (\n    <main>\n      <Searchbar filter={filter} searcher={filter => searcher(filter)} />\n      {isMovie ? (\n        <MoviesList title=\"Search The Movie DataBase for any movie title\">\n          {movies &&\n            movies.map(({ movieId, movieTitle }) => (\n              <MoviesListItem key={movieId} movieTitle={movieTitle} />\n            ))}\n        </MoviesList>\n      ) : (\n        <div style={{marginTop: '200px'}}>\n          <p>There is no movie in TMDB of the title you entered</p>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios.get(BASE_URL + urlPath, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: 1,\n      ...myParams,\n    },\n  }).then(response => {\n    return response;\n  }).catch(error => {\n    console.log('error', error)\n  })\n}\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  getMoviesData(response.data.results, movies);\n  return movies;\n}\n\nconst getMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  })\n}\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  getMoviesData(response.data.results, movies);\n  return movies;\n};\n\nexport {getTrendingMovies, getQueryMovies}\n//export default getTrendingMovies;"],"names":["title","children","movieId","movieTitle","searcher","useState","filter","setFilter","onSubmit","event","preventDefault","handleSubmit","type","name","value","onChange","target","handleChange","query","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","isMovie","setIsMovie","useEffect","getMovies","getQueryMovies","response","MoviesList","map","MoviesListItem","style","marginTop","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","console","log","getTrendingMovies","getMoviesData","data","results","forEach","movie","push","id"],"sourceRoot":""}