{"version":3,"file":"static/js/544.8fc56c6d.chunk.js","mappings":"0JAiBA,IAdmB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzB,OACI,4BACI,wBAAKD,KACL,wBAAKC,MAGhB,C,kDCCD,IARuB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACjD,OACE,yBACE,SAAC,KAAD,CAAMD,GAAE,UAAKA,GAAME,MAAO,CAACD,KAAMA,GAAjC,SAAyCF,KADlCD,EAIZ,C,2HCyBD,UA5Ba,WACX,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAYC,EAAAA,EAAAA,MAclB,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,qGACKC,EAAAA,EAAAA,MADL,OACZC,EADY,OAElBC,QAAQC,IAAI,WAAYF,GAEtBN,EADe,OAAbM,EACQA,EAEA,IANM,2CAAH,qDASjBF,GACD,GAAE,KAED,2BACE,SAAC,IAAD,CAAYb,MAAM,iBAAlB,SACGQ,GACCA,EAAOU,KAAI,gBAAGhB,EAAH,EAAGA,QAASC,EAAZ,EAAYA,WAAZ,OACT,SAAC,IAAD,CAA8BA,WAAYA,EAAYC,GAAI,UAAYF,EAASG,KAAMK,EAAWR,QAAUA,GAArFA,EADZ,OAMpB,C,wJCzBKiB,EAAS,mCAAG,WAAOC,EAASC,GAAhB,0FACTC,EAAAA,EAAAA,IALe,+BAMJF,EAAS,CACvBG,QAAO,QACLC,QATe,mCAUfC,SAAU,QACVC,KAAM,GACHL,KAGNM,MAAK,SAAAZ,GACJ,OAAOA,CACR,IACAa,OAAM,SAAAC,GACLb,QAAQC,IAAI,QAASY,EACtB,KAfa,2CAAH,wDAkBTf,EAAiB,mCAAG,sGACDK,EAAU,uBADT,UAEP,QADXJ,EADkB,iDAGf,MAHe,cAKpBP,EAAS,GACbsB,EAAiBf,EAASgB,KAAKC,QAASxB,GANhB,kBAOjBA,GAPiB,2CAAH,qDAUjBsB,EAAmB,SAACf,EAAUP,GAClCO,EAASkB,SAAQ,SAAAC,GACf,OAAO1B,EAAO2B,KAAK,CAAEjC,QAASgC,EAAME,GAAIjC,WAAY+B,EAAMlC,OAC3D,GACF,EAEKqC,EAAc,mCAAG,WAAMC,GAAN,kFACfjB,EAAW,CACfiB,MAAOA,EACPZ,KAAM,GAHa,SAKEP,EAAU,gBAAiBE,GAL7B,UAMJ,QADXN,EALe,iDAOZ,MAPY,cASjBP,EAAS,GACbsB,EAAiBf,EAASgB,KAAKC,QAASxB,GAVnB,kBAWdA,GAXc,2CAAH,sDAcd+B,EAAe,mCAAG,WAAMH,GAAN,uGACCjB,EAAU,UAAD,OAAWiB,IADrB,UAEL,QADXrB,EADgB,iDAGb,MAHa,gBAMpBA,EAASgB,KADHS,EALc,EAKdA,YAAaxC,EALC,EAKDA,MAAOyC,EALN,EAKMA,aAAcC,EALpB,EAKoBA,aAAcC,EALlC,EAKkCA,SAAUC,EAL5C,EAK4CA,OAE5DC,EAAe,CACnBC,WAAY,kCAAoCN,EAChDxC,MAAAA,EACA+C,YAAY,GAAD,OAAK,IAAIC,KAAKP,GAAcQ,eACvCC,YAAaR,EACbC,SAAAA,EACAC,OAAAA,GAboB,kBAefC,GAfe,2CAAH,qD","sources":["components/MoviesList.jsx","components/MoviesListItem.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ title, children }) => {\n    return (\n        <div>\n            <h2>{title}</h2>\n            <ul>{children}</ul>\n        </div>\n    )\n};\n\nMoviesList.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node,\n}\n\nexport default MoviesList;","import React from 'react';\nimport { Link } from './SharedLayout.styled';\n\nconst MoviesListItem = ({ movieId, movieTitle, to, from }) => {\n  return (\n    <li key={movieId}>\n      <Link to={`${to}`} state={{from: from}}>{movieTitle}</Link>\n    </li>\n  );\n};\n\nexport default MoviesListItem;\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getTrendingMovies } from 'services/api';\nimport MoviesList from 'components/MoviesList';\nimport MoviesListItem from 'components/MoviesListItem';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const locaction = useLocation();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await getTrendingMovies();\n      console.log('response', response);\n      if (response !== null) {\n        setMovies(response);\n      } else {\n        setMovies([]);\n      }\n    };\n    fetchMovies();\n  }, []);\n  return (\n    <main>\n      <MoviesList title=\"Trending today\">\n        {movies &&\n          movies.map(({ movieId, movieTitle }) => (\n            <MoviesListItem key={movieId} movieTitle={movieTitle} to={'movies/' + movieId} from={locaction} movieId={ movieId} />\n          ))}\n      </MoviesList>\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nexport { getTrendingMovies, getQueryMovies, getMovieDetails };\n//export default getTrendingMovies;\n"],"names":["title","children","movieId","movieTitle","to","from","state","useState","movies","setMovies","locaction","useLocation","useEffect","fetchMovies","getTrendingMovies","response","console","log","map","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","handleMoviesData","data","results","forEach","movie","push","id","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","overview","genres","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage"],"sourceRoot":""}