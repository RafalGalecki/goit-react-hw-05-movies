{"version":3,"file":"static/js/961.16c4c9ba.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState, Suspense } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport { getMovieDetails } from 'services/api';\nimport { Link } from '../../components/SharedLayout.styled';\nimport Loader from '../../components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const getDetails = async () => {\n      const response = await getMovieDetails(id);\n      if (response !== null) {\n        setMovieDetails(response);\n        console.log('Details', response);\n      } else {\n        setMovieDetails('');\n      }\n    };\n    getDetails();\n  }, [id]);\n\n  return (\n    <main>\n      <Link to={location.state ? location.state.from : '/'}>&lt; Go back</Link>\n      {movieDetails && (\n        <>\n          <div>\n            <div>\n              {!movieDetails.posterPath.includes(null) ? (\n                <img\n                  src={movieDetails.posterPath}\n                  alt={`${movieDetails.title}'s poster`}\n                />\n              ) : (\n                <p>No poster yet.</p>\n              )}\n            </div>\n            <div>\n              <h3>\n                {movieDetails.title} ({movieDetails.releaseDate})\n              </h3>\n              <p>User score: {Math.round(movieDetails.voteAverage * 10)}%</p>\n              <h4>Overview</h4>\n              <p>{movieDetails.overview}</p>\n              <h4>Genres</h4>\n              <ul>\n                {movieDetails.genres.map(element => (\n                  <li key={element.id}>{element.name}</li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          <div>\n            <h5>Additional information</h5>\n            <ul>\n              <li>\n                <Link to=\"cast\">Cast</Link>\n              </li>\n              <li>\n                <Link to=\"reviews\">Reviews</Link>\n              </li>\n            </ul>\n          </div>\n        </>\n      )}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n};\n"],"names":["useState","movieDetails","setMovieDetails","id","useParams","location","useLocation","useEffect","getDetails","getMovieDetails","response","console","log","to","state","from","posterPath","includes","src","alt","title","releaseDate","Math","round","voteAverage","overview","genres","map","element","name","Suspense","fallback","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","getQueryMovies","query","poster_path","release_date","vote_average","Date","getFullYear","getMovieCast","cast","profile_path","character","srcImg","getMovieReviews","reviews","author","content"],"sourceRoot":""}