{"version":3,"file":"static/js/612.c4133632.chunk.js","mappings":"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","sources":["components/CastElement.jsx","components/Cast.jsx","../node_modules/nanoid/index.browser.js","services/api.js"],"sourcesContent":["import React from 'react';\n\n\nconst CastElement = ({ id, srcImg, name, character }) => {\n  return (\n    <li>\n      {!srcImg.includes(null) ? (\n        <img src={srcImg} alt={`${name}'s portrait`} />\n      ) : (\n        <p>No image yet.</p>\n      )}\n      <p>{name}</p>\n      <p>Character: {character}</p>\n    </li>\n  );\n};\nexport default CastElement;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { getMovieCast } from 'services/api';\nimport CastElement from 'components/CastElement';\nimport { Container } from './SharedLayout.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getCast = async () => {\n      setIsLoading(true);\n      const response = await getMovieCast(id);\n      if (response !== null) {\n        setCast([...response]);\n        console.log('CAST', response);\n      } else {\n        setCast([]);\n      }\n      setIsLoading(false);\n    };\n    getCast();\n  }, [id]);\n\n  return (\n    <Container>\n      {!!isLoading ? (\n        <div>Loading...</div>\n      ) : cast.length > 0 ? (\n        <ul>\n          {cast.map(element => {\n            return (\n              <CastElement\n                key={element.id + nanoid()}\n                srcImg={element.srcImg}\n                name={element.name}\n                character={element.character}\n              />\n            );\n          })}\n        </ul>\n      ) : (\n        <div>Cast not found</div>\n      )}\n      \n    </Container>\n  );\n};\n\nexport default Cast;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n};\n"],"names":["id","srcImg","name","character","includes","src","alt","useState","cast","setCast","useParams","isLoading","setIsLoading","useEffect","getCast","getMovieCast","response","console","log","length","map","element","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","title","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","overview","genres","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","profile_path","getMovieReviews","reviews","author","content"],"sourceRoot":""}