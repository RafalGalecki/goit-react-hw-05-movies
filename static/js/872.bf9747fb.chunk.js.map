{"version":3,"file":"static/js/872.bf9747fb.chunk.js","mappings":"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","sources":["components/CastElement.jsx","components/Cast.jsx","services/api.js"],"sourcesContent":["import React from 'react';\n\nconst CastElement = ({ srcImg, name, character }) => {\n  return (\n    <li>\n      <img src={srcImg} alt={`${name}'s portrait`} />\n      <p>{name}</p>\n      <p>Character: {character}</p>\n    </li>\n  );\n};\nexport default CastElement;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast } from 'services/api';\nimport CastElement from 'components/CastElement';\nimport { Container } from './SharedLayout.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getCast = async () => {\n      setIsLoading(true);\n      const response = await getMovieCast(id);\n      if (response !== null) {\n        setCast([...response]);\n      } else {\n        setCast([]);\n      }\n      setIsLoading(false);\n    };\n    getCast();\n  }, [id]);\n\n  return (\n    <Container>\n      {!!isLoading ? (\n        <div>Loading...</div>\n      ) : cast.length > 0 ? (\n        <ul>\n          {cast.map(element => {\n            return (\n              <CastElement\n                key={element.id}\n                srcImg={element.srcImg}\n                name={element.name}\n                character={element.character}\n              />\n            );\n          })}\n        </ul>\n      ) : (\n        <div>Cast not found</div>\n      )}\n      \n    </Container>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(star => {\n    const { id, profile_path, name, character } = star;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    })\n  })\n  return cast;\n}\n\nexport { getTrendingMovies, getQueryMovies, getMovieDetails, getMovieCast };\n\n"],"names":["srcImg","name","character","src","alt","useState","cast","setCast","id","useParams","isLoading","setIsLoading","useEffect","getCast","getMovieCast","response","length","map","element","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","console","log","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","title","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","overview","genres","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","star","profile_path"],"sourceRoot":""}