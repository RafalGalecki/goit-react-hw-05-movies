{"version":3,"file":"static/js/40.e1d0de9f.chunk.js","mappings":"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","sources":["components/ReviewsElement/ReviewsElement.styled.js","components/ReviewsElement/ReviewsElement.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewLi = styled.li`\nfont-size: 14px;\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\nmargin-bottom: 20px;\n`;","import React from 'react';\nimport Markdown from 'marked-react';\nimport { ReviewLi } from './ReviewsElement.styled';\nimport parse from 'html-react-parser';\nconst ReviewsElement = ({ author, content }) => {\n  const parsed = parse(content);\n  return (\n    <ReviewLi>\n      <h4>Author: {author}</h4>\n      {content.includes('<em>') ? (\n        <p>{parsed}</p>\n      ) : (\n        <Markdown>{content}</Markdown>\n      )}\n    </ReviewLi>\n  );\n};\nexport default ReviewsElement;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/api';\nimport ReviewsElement from '../ReviewsElement/ReviewsElement';\nimport { Container } from '../SharedLayout/SharedLayout.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      const response = await getMovieReviews(id);\n      if (response !== null) {\n        setReviews(response);\n      } else {\n        setReviews([]);\n      }\n    };\n    getReviews();\n  }, [id]);\n\n  return (\n    <Container>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(element => {\n            return (\n              <ReviewsElement\n                key={element.id}\n                author={element.author}\n                content={element.content}\n              />\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </Container>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      console.log('FULL Response:', response);\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  console.log('Trending', response);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({\n      movieId: movie.id,\n      movieTitle: movie.title,\n      movieBackdrop: 'https://image.tmdb.org/t/p/w200' + movie.backdrop_path,\n    });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  } = response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  };\n  console.log('details', response);\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  console.log('CAST', response);\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieCrew = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let crew = [];\n  console.log('Crew', response);\n  response.data.crew.forEach(element => {\n    const { id, profile_path, name, department, job } = element;\n    return crew.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      department,\n      job,\n    });\n  });\n  return crew;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nconst getMovieSimilar = async id => {\n  const response = await fetchTMDB(`/movie/${id}/similar`);\n  if (response === null) {\n    return null;\n  }\n  let similar = [];\n  console.log('SIMILAR', response);\n  response.data.results.forEach(element => {\n    const { id, poster_path, title, release_date } = element;\n    return similar.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + poster_path,\n      title,\n      releaseDate: `${new Date(release_date).getFullYear()}`,\n    });\n  });\n  return similar;\n};\n\nconst getTheBestOfGenre = async (genre) => {\n  const response = await fetchTMDB(\n    `/discover/movie?with_genres=${genre}&sort_by=vote_average.desc&vote_count.gte=10`\n  );\n  if (response === null) {\n    return null;\n  }\n  console.log('BEST res', response)\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieCrew,\n  getMovieReviews,\n  getMovieSimilar,\n  getTheBestOfGenre,\n};\n"],"names":["ReviewLi","styled","author","content","parsed","parse","includes","useState","reviews","setReviews","id","useParams","useEffect","getReviews","getMovieReviews","response","length","map","element","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","console","log","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","title","movieBackdrop","backdrop_path","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","vote_count","overview","genres","homepage","tagline","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","voteCount","getMovieCast","cast","profile_path","name","character","srcImg","getMovieCrew","crew","department","job","getMovieSimilar","similar","getTheBestOfGenre","genre"],"sourceRoot":""}