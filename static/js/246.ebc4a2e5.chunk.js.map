{"version":3,"file":"static/js/246.ebc4a2e5.chunk.js","mappings":"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","sources":["components/ReviewsElement.jsx","components/Reviews.jsx","services/api.js"],"sourcesContent":["import React from 'react';\nimport Markdown from 'marked-react';\n\nconst ReviewsElement = ({ author, content }) => {\n  return (\n    <li>\n      <h4>Author: {author}</h4>\n      <Markdown>{content}</Markdown>\n    </li>\n  );\n};\n\nexport default ReviewsElement;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/api';\nimport ReviewsElement from './ReviewsElement';\nimport { Container } from './SharedLayout.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n  //const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      //setIsLoading(true);\n      const response = await getMovieReviews(id);\n      if (response !== null) {\n        setReviews(response);\n        console.log('REVIEWS', response);\n      } else {\n        setReviews([]);\n      }\n      //setIsLoading(false);\n    };\n    getReviews();\n  }, [id]);\n\n  return (\n    <Container>\n      {reviews.length > 0 ?\n        (<ul>\n          {reviews.map(element => {\n            return (\n            \n              <ReviewsElement\n                key={element.id}\n                author={element.author}\n                content={element.content}\n              />\n              \n            );\n          })}\n        </ul>) : (<p>There are no reviews</p>)\n      }\n    </Container>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n};\n"],"names":["author","content","useState","reviews","setReviews","id","useParams","useEffect","getReviews","getMovieReviews","response","console","log","length","map","element","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","title","getQueryMovies","query","getMovieDetails","poster_path","release_date","vote_average","overview","genres","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","getMovieCast","cast","profile_path","name","character","srcImg"],"sourceRoot":""}