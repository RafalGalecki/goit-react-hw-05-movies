{"version":3,"file":"static/js/296.b09b6a89.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","webpack://goit-react-hw-05-movies/./src/components/MovieDetailsCard/MovieDetailsCard.module.css?4584","components/MovieDetailsCard/MovieDetailsCard.jsx","webpack://goit-react-hw-05-movies/./src/components/MovieDetailsAdditionalInfo/MovieDetailsAdditionalInfo.module.css?dd1f","components/MovieDetailsAdditionalInfo/MovieDetailsAdditionalInfo.jsx","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie__link\":\"MovieDetails_movie__link__AIewV\"};","// extracted by mini-css-extract-plugin\nexport default {\"movie__card\":\"MovieDetailsCard_movie__card__5wAQ4\",\"movie__poster\":\"MovieDetailsCard_movie__poster__G2no+\",\"rotateY\":\"MovieDetailsCard_rotateY__FHLij\",\"movie__title\":\"MovieDetailsCard_movie__title__l8Li3\",\"movie__paragraph\":\"MovieDetailsCard_movie__paragraph__9OI+V\",\"movie__desc\":\"MovieDetailsCard_movie__desc__1fKsd\",\"movie__genres\":\"MovieDetailsCard_movie__genres__dgjst\",\"movie__score\":\"MovieDetailsCard_movie__score__FIjSL\",\"movie__homepage\":\"MovieDetailsCard_movie__homepage__09Zx1\",\"thumb\":\"MovieDetailsCard_thumb__3DSQn\",\"label\":\"MovieDetailsCard_label__qIArV\",\"image\":\"MovieDetailsCard_image__eMvMn\"};","import React from 'react';\nimport css from './MovieDetailsCard.module.css';\nimport placeholderPoster from '../../images/placeholderPortrait.jpg';\n\nconst MovieDetailsCard = ({\n  posterPath,\n  title,\n  releaseDate,\n  voteAverage,\n  voteCount,\n  tagline,\n  overview,\n  genres,\n  homepage,\n}) => {\n  return (\n    <div className={[css.movie__card]}>\n      {!posterPath.includes(null) ? (\n        <div className={[css.movie__poster]}>\n          <img src={posterPath} alt={`${title}'s poster`} />\n        </div>\n      ) : (\n        <div className={css.thumb}>\n          <img\n            className={css.image}\n            src={placeholderPoster}\n            alt=\"placeholder\"\n          />\n          <p className={css.label}>No poster yet</p>\n        </div>\n      )}\n\n      <div className={[css.movie__desc]}>\n        <div>\n          <h2 className={[css.movie__title]}>\n            {title} <span className={[css.movie__score]}>({releaseDate})</span>\n          </h2>\n          <h4 className={[css.movie__score]}>\n            User score: {Math.round(voteAverage * 10)}% / Votes: {voteCount}\n          </h4>\n        </div>\n        <div className={[css.movie__paragraph]}>\n          <h4>Overview</h4>\n          {tagline && <p>&#10077; {tagline} &#10078;</p>}\n          <p>{overview}</p>\n        </div>\n        <div className={[css.movie__paragraph]}>\n          <h4>Genres</h4>\n          <ul className={[css.movie__genres]}>\n            {genres.map((element, index) => (\n              <li key={element.id}>\n                {element.name}\n                {index !== genres.length - 1 ? ',' : ''}\n              </li>\n            ))}\n          </ul>\n        </div>\n        {homepage && (\n          <div className={[css.movie__paragraph]}>\n            <h4>Homepage</h4>\n\n            <a\n              className={[css.movie__homepage]}\n              href={homepage}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {homepage}\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetailsCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"movie__additions\":\"MovieDetailsAdditionalInfo_movie__additions__wW2jM\",\"additions__list\":\"MovieDetailsAdditionalInfo_additions__list__IS+2e\",\"additions__item\":\"MovieDetailsAdditionalInfo_additions__item__08Am2\"};","import React from 'react';\nimport { Link } from '../SharedLayout/SharedLayout.styled';\nimport css from './MovieDetailsAdditionalInfo.module.css';\n\nconst MovieDetailsAdditionalInfo = ({ fromLocation }) => {\n  const infoLinkNames = ['cast', 'reviews', 'crew', 'similar'];\n  \n\n  return (\n    <div className={[css.movie__additions]}>\n      <h5>Additional information</h5>\n      <ul className={[css.additions__list]}>\n        {infoLinkNames.map((element, index) => {\n          return (\n            <li key={index}>\n              <Link\n                className={[css.additions__item]}\n                to={element}\n                state={fromLocation}\n              >\n                &#10139; {element}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default MovieDetailsAdditionalInfo;\n","import { useEffect, useState, Suspense } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport { getMovieDetails } from 'services/api';\nimport { Link } from '../../components/SharedLayout/SharedLayout.styled';\nimport Loader from '../../components/Loader/Loader';\nimport css from './MovieDetails.module.css';\nimport MovieDetailsCard from 'components/MovieDetailsCard/MovieDetailsCard';\nimport MovieDetailsAdditionalInfo from 'components/MovieDetailsAdditionalInfo/MovieDetailsAdditionalInfo';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    const getDetails = async () => {\n      const response = await getMovieDetails(id);\n      if (response !== null) {\n        setMovieDetails(response);\n      } else {\n        setMovieDetails('');\n      }\n    };\n    getDetails();\n  }, [id]);\n\n  return (\n    <main>\n      <Link className={[css.movie__link]} to={backLinkHref}>\n        &#10094; Go back\n      </Link>\n      {movieDetails && (\n        <>\n          <MovieDetailsCard\n            posterPath={movieDetails.posterPath}\n            title={movieDetails.title}\n            releaseDate={movieDetails.releaseDate}\n            voteAverage={movieDetails.voteAverage}\n            voteCount={movieDetails.voteCount}\n            tagline={movieDetails.tagline}\n            overview={movieDetails.overview}\n            genres={movieDetails.genres}\n            homepage={movieDetails.homepage}\n          />\n          <MovieDetailsAdditionalInfo\n            fromLocation={{ from: location.state.from }} />\n          \n        </>\n      )}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      console.log('FULL Response:', response);\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  console.log('Trending', response);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({\n      movieId: movie.id,\n      movieTitle: movie.title,\n      movieBackdrop: 'https://image.tmdb.org/t/p/w200' + movie.backdrop_path,\n    });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const {\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  } = response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n    homepage,\n    tagline,\n  };\n  console.log('details', response);\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  console.log('CAST', response);\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieCrew = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let crew = [];\n  console.log('Crew', response);\n  response.data.crew.forEach(element => {\n    const { id, profile_path, name, department, job } = element;\n    return crew.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      department,\n      job,\n    });\n  });\n  return crew;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nconst getMovieSimilar = async id => {\n  const response = await fetchTMDB(`/movie/${id}/similar`);\n  if (response === null) {\n    return null;\n  }\n  let similar = [];\n  console.log('SIMILAR', response);\n  response.data.results.forEach(element => {\n    const { id, poster_path, title, release_date } = element;\n    return similar.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + poster_path,\n      title,\n      releaseDate: `${new Date(release_date).getFullYear()}`,\n    });\n  });\n  return similar;\n};\n\nconst getTheBestOfGenre = async (genre) => {\n  const response = await fetchTMDB(\n    `/discover/movie?with_genres=${genre}&sort_by=vote_average.desc&vote_count.gte=10`\n  );\n  if (response === null) {\n    return null;\n  }\n  console.log('BEST res', response)\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMoviesWithCast = async (castId) => {\n  const response = await fetchTMDB(\n    `/discover/movie?with_people=${castId}&sort_by=vote_average.desc`\n  );\n  if (response === null) {\n    return null;\n  }\n  console.log('Cast - movies res', response)\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieCrew,\n  getMovieReviews,\n  getMovieSimilar,\n  getTheBestOfGenre,\n  getMoviesWithCast,\n};\n"],"names":["posterPath","title","releaseDate","voteAverage","voteCount","tagline","overview","genres","homepage","className","css","includes","src","placeholderPoster","alt","Math","round","map","element","index","name","length","id","href","target","rel","fromLocation","to","state","useState","movieDetails","setMovieDetails","useParams","location","useLocation","backLinkHref","from","useEffect","getDetails","getMovieDetails","response","Suspense","fallback","Loader","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","console","log","catch","error","getTrendingMovies","movies","handleMoviesData","data","results","forEach","movie","push","movieId","movieTitle","movieBackdrop","backdrop_path","getQueryMovies","query","poster_path","release_date","vote_average","vote_count","Date","getFullYear","getMovieCast","cast","profile_path","character","srcImg","getMovieCrew","crew","department","job","getMovieReviews","reviews","author","content","getMovieSimilar","similar","getTheBestOfGenre","genre"],"sourceRoot":""}