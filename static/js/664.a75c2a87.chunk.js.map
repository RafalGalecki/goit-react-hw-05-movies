{"version":3,"file":"static/js/664.a75c2a87.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","components/MoviesListElement.styled.js","components/MoviesListElement.jsx","components/Searchbar.styled.js","components/Searchbar.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ title, children }) => {\n    return (\n        <div>\n            <h2 style={{marginBottom: '10px'}}>{title}</h2>\n            <ul>{children}</ul>\n        </div>\n    )\n};\n\nMoviesList.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node,\n}\n\nexport default MoviesList;","import styled from 'styled-components';\n\nexport const MovieLi = styled.li`\n  font-weight: 500;\n  padding: 2px;\n  transition-property: transform;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(0.996);\n  }\n`;","import React from 'react';\nimport { Link } from './SharedLayout.styled';\nimport { MovieLi } from './MoviesListElement.styled';\n\nconst MoviesListElement = ({ movieId, movieTitle, to, from }) => {\n  return (\n    <MovieLi key={movieId}>\n      <Link to={`${to}`} state={{ from: from }}>\n        &#10139; {movieTitle}\n      </Link>\n    </MovieLi>\n  );\n};\n\nexport default MoviesListElement;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: row;\n  justify-content: start;\n  align-items: center;\n  margin: 0;\n  margin-bottom: 20px;\n  height: 30px;\n  width: 70vw;\n  gap: 4px;\n`;\n\nexport const Input = styled.input`\n  padding: 8px;\n  height: 100%;\n  width: 320px;\n  border-color: white;\n  border-radius: 4px;\n  outline: none;\n  color: #261c09;\n  box-shadow: 4px 4px 6px rgba(58, 43, 12, 0.22);\n`;\n\nexport const Button = styled.button`\n  text-align: center;\n  height: 100%;\n  width: 100px;\n\n  padding: 0 20px;\n  background-color: orange;\n  color: white;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.87;\n  letter-spacing: 0.06em;\n  text-align: center;\n  cursor: pointer;\n  border: none;\n  border-radius: 4px;\n  box-shadow: inset 3px 6px 16px -8px rgba(249, 243, 232, 0.9),\n    inset -2px -2px 8px 1px rgba(77, 57, 19, 0.75),\n    4px 4px 6px rgba(58, 43, 12, 0.22);\n  transition-property: box-shadow;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    box-shadow: inset 2px 2px 3px rgba(77, 57, 19, 0.75),\n      inset -2px -2px 4px rgba(249, 243, 232, 0.6);\n  }\n`;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {Form, Input, Button} from './Searchbar.styled'\n\nconst Searchbar = ({ searcher }) => {\n  const [filter, setFilter] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searcher(filter);\n    setFilter('');\n  };\n  const handleChange = event => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <Form onSubmit={event => handleSubmit(event)}>\n      <Input\n        type=\"search\"\n        name=\"query\"\n        value={filter}\n        placeholder=\"Enter a movie title\"\n        onChange={event => handleChange(event)}\n      />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nSearchbar.propTypes = {\n  searcher: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport Searchbar from 'components/Searchbar';\nimport MoviesList from 'components/MoviesList';\nimport MoviesListElement from 'components/MoviesListElement';\nimport { getQueryMovies } from 'services/api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filter, setFilter] = useState(searchParams.get('query'));\n  const location = useLocation();\n  const [isMovie, setIsMovie] = useState(null);\n\n  const searcher = filter => {\n    if (filter) {\n      setFilter(filter);\n    }\n  };\n\n  useEffect(() => {\n    if (filter) {\n      setSearchParams({ query: filter });\n      const getMovies = async () => {\n        const response = await getQueryMovies(filter);\n        console.log('RES', response);\n        if (response !== null) {\n          setMovies(response);\n          setIsMovie(true);\n        }\n        if (response.length === 0) {\n          setIsMovie(false);\n          console.log('ZERO');\n        }\n      };\n      getMovies();\n    }\n  }, [filter, setSearchParams]);\n\n  return (\n    <main>\n      <Searchbar filter={filter} searcher={filter => searcher(filter)} />\n\n      {isMovie === null ? (\n        <div>\n          <h4>Search The Movie DataBase for movies</h4>\n        </div>\n      ) : isMovie ? (\n        <MoviesList>\n          {movies &&\n            movies.map(({ movieId, movieTitle }) => (\n              <MoviesListElement\n                key={movieId}\n                movieTitle={movieTitle}\n                to={movieId.toString()}\n                from={location}\n                movieId={movieId}\n              />\n            ))}\n        </MoviesList>\n      ) : (\n        <div>\n          <p>No results</p>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport const API_KEY = '7e626872ba2c457d969115031d94d6fb';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const PAGE = 1;\n\n// This is tha main fetch fuction\nconst fetchTMDB = async (urlPath, myParams) => {\n  return axios\n    .get(BASE_URL + urlPath, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        ...myParams,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      console.log('error', error);\n    });\n};\n\nconst getTrendingMovies = async () => {\n  const response = await fetchTMDB('/trending/movie/day');\n  if (response === null) {\n    return null;\n  }\n  console.log('FULL RESPONSE', response);\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst handleMoviesData = (response, movies) => {\n  response.forEach(movie => {\n    return movies.push({ movieId: movie.id, movieTitle: movie.title });\n  });\n};\n\nconst getQueryMovies = async query => {\n  const myParams = {\n    query: query,\n    page: 1,\n  };\n  const response = await fetchTMDB('/search/movie', myParams);\n  if (response === null) {\n    return null;\n  }\n  let movies = [];\n  handleMoviesData(response.data.results, movies);\n  return movies;\n};\n\nconst getMovieDetails = async id => {\n  const response = await fetchTMDB(`/movie/${id}`);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, release_date, vote_average, vote_count, overview, genres } =\n    response.data;\n  const movieDetails = {\n    posterPath: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    releaseDate: `${new Date(release_date).getFullYear()}`,\n    voteAverage: vote_average,\n    voteCount: vote_count,\n    overview,\n    genres,\n  };\n  return movieDetails;\n};\n\nconst getMovieCast = async id => {\n  const response = await fetchTMDB(`/movie/${id}/credits`);\n  if (response === null) {\n    return null;\n  }\n  let cast = [];\n  response.data.cast.forEach(element => {\n    const { id, profile_path, name, character } = element;\n    return cast.push({\n      id,\n      srcImg: 'https://image.tmdb.org/t/p/w200' + profile_path,\n      name,\n      character,\n    });\n  });\n  return cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await fetchTMDB(`/movie/${id}/reviews`);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(element => {\n    const { id, author, content } = element;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nexport {\n  getTrendingMovies,\n  getQueryMovies,\n  getMovieDetails,\n  getMovieCast,\n  getMovieReviews,\n};\n"],"names":["title","children","style","marginBottom","MovieLi","styled","movieId","movieTitle","to","from","state","Form","Input","Button","searcher","useState","filter","setFilter","onSubmit","event","preventDefault","handleSubmit","type","name","value","placeholder","onChange","target","handleChange","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","location","useLocation","isMovie","setIsMovie","useEffect","query","getMovies","getQueryMovies","response","console","log","length","MoviesList","map","MoviesListElement","toString","fetchTMDB","urlPath","myParams","axios","params","api_key","language","page","then","catch","error","getTrendingMovies","handleMoviesData","data","results","forEach","movie","push","id","getMovieDetails","poster_path","release_date","vote_average","vote_count","overview","genres","movieDetails","posterPath","releaseDate","Date","getFullYear","voteAverage","voteCount","getMovieCast","cast","element","profile_path","character","srcImg","getMovieReviews","reviews","author","content"],"sourceRoot":""}